alias functionnum R1;
alias currentPID R2;

if(functionnum == 1)then
    alias i R3;
    alias j R4;
    j = -1;
    i =  0;
    while(i<16)do
       if([PROCESS_TABLE + i*16 + 4] == TERMINATED)then
        j = i;
        break;
       endif;
    i = i+1;
    endwhile;
  if(j != -1)then
   [PROCESS_TABLE + j*16 + 1] = j;
   [PROCESS_TABLE + j*16 + 4] = ALLOCATED;
   [PROCESS_TABLE + j*16 + 14] = PAGE_TABLE_BASE + j*20;
   [PROCESS_TABLE + j*16 + 15] = 10;
  endif;
   R0 = j;
   return;

endif;
if(functionnum == 2)then
    
   alias p R4;
   alias q R5;
   q = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]* 16 + 11]*512 + 496;
   p = 0;
   while(p < 8) do
      if([q + p*2] == 1) then
         multipush(R0,R1,R2,R3,R4,R5);
         alias funnum R1;
         alias semid R3;
         funnum = 7;
         semid = p;
          call MOD_0;
         multipop(R0,R1,R2,R3,R4,R5);
      endif;
    p = p +1;
  endwhile;  
  
    multipush(R0,R1,R2,R3,R4,R5);
    R1 = 2;
    R2 = [PROCESS_TABLE + currentPID*16 + 11];
  //  breakpoint;
    call MOD_2;
  //  breakpoint;
    multipop(R0,R1,R2,R3,R4,R5);
    return;
endif;
if(functionnum==3) then //exit 
    currentPID = [SYSTEM_STATUS_TABLE + 1];
     if([PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 9] != 9)then
         alias i R3;
         i = 0;
         while(i<16)do
            if([PROCESS_TABLE + i*16 + 4] == WAIT_PROCESS)then
               if([PROCESS_TABLE + i*16 + 5] == currentPID)then
                   [PROCESS_TABLE + i*16 + 4] = READY;
               endif;
            endif;
            if([PROCESS_TABLE + i*16 + 2] == currentPID)then
              [PROCESS_TABLE + i*16 + 2] = -1; 
            endif;  
         i = i+1;
         endwhile;
      endif;
    multipush(R0,R1,R2);
    R1=4; // free page table
    R2=currentPID;
    call PROCESS_MANAGER; //module 1
    multipop(R0,R1,R2);
    multipush(R0,R1,R2);
    R1=2; // free user page area
    R2=currentPID;
    call PROCESS_MANAGER; //module 1
    multipop(R0,R1,R2);
    [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=TERMINATED;
    return;
endif;
if(functionnum==4) then //free page table
    PTBR=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14];
    [PTBR+0]=-1; //invalidating lib pages
    [PTBR+1]="0000";
    [PTBR+2]=-1;
    [PTBR+3]="0000";
    alias i R4;
    i=0;
    while(i<8) do //releasing valid pages
        if([PTBR+2*i+4]!=-1) then   
            multipush(R0,R1,R2,R4);
            R1=2; //release page
            R2=[PTBR+2*i+4];
            call MOD_2; //module 2
            multipop(R0,R1,R2,R4); 
            [PTBR+2*i+4]=-1;                   
            [PTBR+2*i+5]="0000";
        endif;
        i=i+1;
    endwhile;
    i=2;
    while(i<4) do
        if([DISK_FREE_LIST+10*currentPID+i]!=-1) then
            multipush(R0,R1,R2,R3,R4);
            R1=4; //release block
            R3=currentPID;
            R2=[DISK_MAP_TABLE +10*currentPID+i];
            call MOD_2;
            multipop(R0,R1,R2,R3,R4);
        endif;
        i=i+1;
    endwhile;
    i=8;
    while(i<10) do
        if([DISK_FREE_LIST+10*currentPID+i]!=-1) then
            multipush(R0,R1,R2,R3,R4);
            R1=4; //release block
            R3=currentPID;
            R2=[DISK_MAP_TABLE +10*currentPID+i];
            call MOD_2;
            multipop(R0,R1,R2,R3,R4);
        endif;
        i=i+1;
    endwhile;
    i=0;
    while(i<10) do //free disk map table
        [DISK_FREE_LIST+10*currentPID+i]=-1;
        i=i+1;
    endwhile;
    return;
endif;
