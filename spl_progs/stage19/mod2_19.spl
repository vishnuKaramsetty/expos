alias functionnum R1;
alias pagenum R2;
if(functionnum == 1)then
  [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    while([SYSTEM_STATUS_TABLE + 2] == 0)do
       [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
       multipush(R1,R2);
       call MOD_5;
       multipop(R1,R2);
    endwhile;
   [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
   [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
alias i R3;
i = 0;
 while(i<128)do
    if([MEMORY_FREE_LIST + i] == 0)then
      [MEMORY_FREE_LIST + i] = 1;
      R0 = i;
      break;
     endif;
  i = i + 1;
 endwhile;
//breakpoint;
return;
endif;

if(functionnum == 2)then
[MEMORY_FREE_LIST + pagenum] = [MEMORY_FREE_LIST + pagenum] - 1;

  if([MEMORY_FREE_LIST + pagenum] == 0)then
       [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
  endif;
 R4 = 0;

while(R4 < 16)do
  if([PROCESS_TABLE + (R4)*16 + 4] == WAIT_MEM)then
    [PROCESS_TABLE + (R4)*16 + 4] = READY;
   endif;
R4 = R4 +1;
endwhile;
//breakpoint;
return;
endif;


if(functionnum == 4)then
 alias blocknum R2;
[DISK_FREE_LIST + blocknum] = [DISK_FREE_LIST + blocknum] -1;
return;
endif;



if(R1 == GET_CODE_PAGE) then

        //backup;
	alias block_num R2;	//R2 contains block num
	alias i R3;
	alias block R4;
	alias page_num R0;

	// IF WE GET A PAGE WHICH IS ALREADY PRESENT IN MEMORY
	i = 0;
	while(i < 16) do
		block = 4;
		while(block < 8) do
			if([DISK_MAP_TABLE + 10*i + block] == block_num && [PAGE_TABLE_BASE + 20*i + 2*(block)] != -1) then
				page_num = [PAGE_TABLE_BASE + 20*i + 2*block];
				[MEMORY_FREE_LIST + page_num] = [MEMORY_FREE_LIST + page_num] + 1;
                return;
			endif;
			block = block + 1;
		endwhile;
	i = i+1;
	endwhile;

	// IF NO FREE PAGE IS PRESENT AT MOMENT
	R1 = GET_FREE_PAGE;
	call MOD_2;                 //MEMORY_MANAGER

	R1 = DISK_LOAD;
	R4 = block_num;
	R2 = [SYSTEM_STATUS_TABLE+1];
	R3 = R0;	// page_num got from GET_FREE_PAGE
	call MOD_4;                 //DEVICE_MANGER

	return;

endif;

